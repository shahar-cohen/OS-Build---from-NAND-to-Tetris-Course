// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array power_of_two;
    static int two_times_q_y;

    /** Initializes the library. */
    function void init() {
        var int index, res;

        let power_of_two = Array.new(16);
        let two_times_q_y = 0;
        let res = 1;
        let index = 0;

        while (index < 16){
            let power_of_two[index] = res;
            let res = res + res;
            let index = index + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if ( x < 0 ) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int res, shiftedX, counter;

        let shiftedX = x;
        let counter = 0;
        let res = 0;

        while (counter < 16){
            if (y & power_of_two[counter]){
                let res = res + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let counter = counter + 1;
        }
        return res;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int res;

        if (y = 0){
            do Sys.error(3);
            return 0;
        }

        if (Math.abs(x) < Math.abs(y)){
                    return 0;
        }

		let two_times_q_y = 0;

        let res = Math.division_helper(Math.abs(x), Math.abs(y));

        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))){ // if x/y is negative
            return -res;
        }
        return res;
    }

    function int division_helper(int x, int y){
        var int q;

        if ((y > x) | (y < 0)) { // if y is too large or overflowed
            return 0;
        }

        let q = Math.division_helper(x, y + y);

		if (q = 0){
			return 1; // because x-2*q*y >= y, as q==0 and x>=y. same as returning 2*q+1
		}

		if (q & power_of_two[0]){ // if q is uneven (meaning 2*q + 1 was returned)
			let two_times_q_y = two_times_q_y + y + y; // add y of inner recursion (2y)
		}

        if ((x - two_times_q_y) < y) {
            return q + q;
        }
        return q + q + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int temp, temp_squared, res, counter;

        if (x < 0){
            do Sys.error(4)
        }

        let temp = 0;
        let res = 0;
        let counter = 7; // 2 to the power of 8 squared is too big, can't be sqrt of x.

        while (counter > -1){
            let temp = res + power_of_two[counter];
            let temp_squared = Math.multiply(temp, temp);
            if ((~(temp_squared > x)) & (temp_squared > 0)) { // if temp^2 <=x and no overflow
                let res = temp;
            }
            let counter = counter - 1;
        }

        return res;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if ( a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if ( a < b) {
            return a;
        } else {
            return b;
        }
    }
}
