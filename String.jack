// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */

class String {
	field Array str;
    field int length, max_length;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
    	if (maxLength < 0){
    		do Sys.error(14); // maxLength must be non - negative.
    	}
		if (max_length > 0){
			let str = Array.new(maxLength);
		}
    	let length = 0;
    	let max_length = maxLength;

    	return this;
    }

    /** Disposes this string. */
    method void dispose() {
    	if (max_length > 0){
    		do str.dispose();
    	}
    	do Memory.deAlloc(this);
    	return;
    }

    /** Returns the current length of this string. */
    method int length() {
    	return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
    	if ( (j < 0) | (~(length > j))){
    		do Sys.error(15);
    	}
    	return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
    	if ( (j < 0) | (~(length > j))){
			do Sys.error(16);
		}
		let str[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
    	if (length = max_length){
    		do Sys.error(17);
    	}

    	let str[length] = c;
    	let length = length + 1;
    	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
    if (length = 0){
		do Sys.error(18);
	}
	let length = length - 1;
	return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
    	var int temp, counter;
    	var boolean is_neg;

    	let counter = 0;
    	let temp = 0;

    	if (length = 0){
    		return 0;
    	}

    	if (str[0] = 45){
    		let is_neg = true;
    		let counter = 1;
    	}

    	while ((str[counter] > 47) & (str[counter] < 58)){
			let temp = Math.multiply(temp, 10) + str[counter];
		}

		if (is_neg){
			return -temp;
		}
		return temp;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
    	var int index, nextVal;

    	if (max_length = 0){
    		do Sys.error(19);
    	}

    	while (length > 0){ // reset string
    		do eraseLastChar();
    	}

    	let index = 0;

    	if (val = 0){
    		do appendChar(48); // if 0, append 0 and ret
    		return;
    	}

    	if (val < 0){ // if < 0, add "-" to first char.
    		let str[0] = 45;
    		let val = Math.abs(val);
    		let index = 1;
    	}

    	while (val > 0){
    		if (length = max_length){
    			do Sys.error(19);
    		}
    		let nextVal = Math.divide(val, 10);
    		do appendChar(val - Math.multiply(nextVal, 10) + 48);//append max digit in ascii
    		let val = nextVal;
    	}
    	return;
    }

    /** Returns the new line character. */
    function char newLine() {
    	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
    	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
    	return 34;
    }
}
