// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int maxLen;
    field Array str;
    field int len;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0)
        {
            do Sys.error(14);
        }
        if (maxLength > 0)
        {
            let str = Array.new(maxLength);
        }
        let maxLen = maxLength;
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLen > 0 )
        {
            do str.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j > len) | (j = len))
        {
            do Sys.error(15);
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ( ( j < 0 ) | ( j > len ) | ( j = len ) )
        {
            do Sys.error(16);
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len = maxLen)
        {
            do Sys.error(17);
        }
        let str[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if ( len = 0 )
        {
            do Sys.error(18);
        }
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i,intVal,c;
        var boolean isDigit,isNeg;

        if ( len = 0 )
        {
            return 0;
        }
        let isDigit = true;
        if (str[0] = 45)
        {
            let isNeg = true;
            let i = 1;
        }
        while( ( i < len ) & ( isDigit ) )
        {
            let c = str[i] - 48;
            let isDigit = ~( (c < 0)  |  (c > 9) );
            if (isDigit)
            {
                let intVal = (Math.multiply(intVal,10) + c);
                let i = i + 1;
            }
        }
        if (isNeg)
        {
            let intVal = -intVal;
        }
        return intVal;



    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i,posVal;
        var Array tempStr;
        var boolean isNeg;
        if ( maxLen = 0 )
        {
            do Sys.error(19);
        }

        let tempStr = Array.new(6);

        if ( val < 0 )
        {
            let isNeg = true;
            let val = -val;
        }

        let posVal = val;
        while ( posVal > 0 )
        {
            let posVal = Math.divide(val,10);
            let tempStr[i] = 48 + (val - Math.multiply(posVal,10));
            let i = i + 1;
            let val = posVal;
        }
        if ( isNeg)
        {
            let tempStr[i] = 45;
            let i = i + 1;
        }
        if (maxLen < i)
        {
            do Sys.error(19);
        }
        if ( i = 0 )
        {
            let str[0] = 48;
            let len = 1 ;
        }
        else
        {
            let len = 0;

            while ( len < i )
            {
                let str[len] = tempStr[i - (len + 1)];
                let len = len + 1;
            }
        }
        do tempStr.dispose();
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}